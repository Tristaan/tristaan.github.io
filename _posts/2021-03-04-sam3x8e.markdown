---
layout: post
title: Using the Atmel ATSAM3X8E on linux
categories: [electronics]
tags: [arduino, arm, atmel]
---

You might know the SAM3X8E from the Arduino Due, which can be quite easy to program using the arduino IDE. But how can you compile for and program the Atmel microcontroller directly using the native USB port? The information on this subject was scarce so I made a guide which may help you! Please note that this is hacked together as PlatformIO doesn't support CMSIS for atmelsam devices.

## Requirements
So, to get up and running you need a couple of things:

1. Arduino Due -> [arduino.cc](https://www.arduino.cc/en/pmwiki.php?n=Main/ArduinoBoardDue)
2. PlatformIO -> [platofrmio.org](https://platformio.org/)
3. OpenOCD -> [openocd.org](https://docs.platformio.org/en/latest/core/installation.html#installation-methods)
  - If you have A JTAG debugger, which can be practical to debug your program
4. CMSIS-Atmel -> [github.com](https://github.com/arduino/ArduinoModule-CMSIS-Atmel)
5. CMSIS -> [github.com](https://github.com/ARM-software/CMSIS_5)

We'll be using Arduino Due, just make sure that you use the **native USB** port. This can work with other microcontrollers that are supported by platformio, but this guide is AT91SAM3X8E specific.

## PlatformIO
To install platformio follow the guide linked in the Requirements section. Once you have it installed create a new directory to keep your project, cd into it and initialize a new project with `pio project init`.


## Getting the header files, sources and linker script
Here we'll copy parts of **CMSIS_5** and **CMSIS-Atmel** into the project directory. What we are doing here is creating a custom bootstrapping procedure for our MCU.  Clone the CMSIS-Atmel repository.  First we'll copy the header files into the `include` directory. Copy everything inside `ArduinoModule-CMSIS-Atmel/CMSIS-Atmel/Device/ATMEL` into `<project_root>/include`. This folder also contains the linker scripts and .c sources that we'll need. Copy them into the project root and src dir.
```bash
cp -r ArduinoModule-CMSIS-Atmel/CMSIS-Atmel/Device/ATMEL/* <project_root>/include/.
cd <project_root>
cp include/sam3xa/source/{system_sam3xa.c,as_gcc/startup_sam3xa.c} src/.
cp include/sam3xa/source/as_gcc/{sam3x8e_flash.ld,sam3xa_flash.ld} .
```
Clone the CMSIS_5 repo and copy the `CMSIS` directory into your projects `lib/` folder.
```bash
cp -r CMSIS_5/CMSIS <project_root>/lib/.
```
Now we have the directory structure set up. Next we'll configure platformio to use these files.


## Configuration
As you might have noticed platformio created a config file called **platformio.ini**. This file serves as the configuration for our board and environment.

Copy this configuration into your own:
```ini
[env:develop]
platform = atmelsam
board = dueUSB
framework =
build_flags = -Ilib/CMSIS/Core/Include -D__SAM3X8E__ -D_SAM3XA_SMC_INSTANCE_ -D_SAM3XA_PIOC_INSTANCE_ -D_SAM3XA_PIOD_INSTANCE_ -D_SAM3XA_USART3_INSTANCE_ -D_SAM3XA_TC2_INSTANCE_ -D_SAM3XA_EMAC_INSTANCE_
board_build.ldscript = sam3x8e_flash.ld
upload_protocol = sam-ba
```
Note that framework has to be empty. This sets a couple of defines for the building process and sets the linker script for the sam3x8e flash. To gain more insight into the configuration flags look [here](https://docs.platformio.org/en/v5.1.0/projectconf/index.html).

## Building and uploading
To build and upload you need to have the boards native USB port plugged in. To build and upload use `platformio run -t upload --upload-port /dev/ttyACM0`. This should work. If you encounter any errors with the linker script not being found you didn't put it into the correct folder.

## OpenOCD
First we need to configure OpenOCD to use the Olimex ARM-USB-OCD-H tool and specify the SAM3X8E board. Create a new file called openocd.cfg in your project root and fill it like so:
```
source [find interface/ftdi/olimex-arm-usb-ocd-h.cfg]
source [find target/at91sam3ax_8x.cfg]
```
Then after building and uploading your program, run `openocd` which will create a gdb server which you can connect to using telnet! The server info is printed when running openocd.
